;******************************************************************************
;   This file is a basic template for assembly code for a PIC18F4550. Copy    *
;   this file into your project directory and modify or add to it as needed.  *
;                                                                             *
;   The PIC18FXXXX architecture allows two interrupt configurations. This     *
;   template code is written for priority interrupt levels and the IPEN bit   *
;   in the RCON register must be set to enable priority levels. If IPEN is    *
;   left in its default zero state, only the interrupt vector at 0x008 will   *
;   be used and the WREG_TEMP, BSR_TEMP and STATUS_TEMP variables will not    *
;   be needed.                                                                *
;                                                                             *
;   Refer to the MPASM User's Guide for additional information on the         *
;   features of the assembler.                                                *
;                                                                             *
;   Refer to the PIC18FXX50/XX55 Data Sheet for additional                    *
;   information on the architecture and instruction set.                      *
;                                                                             *
;******************************************************************************
;                                                                             *
;    Filename:                                                                *
;    Date:                                                                    *
;    File Version:                                                            *
;                                                                             *
;    Author:                                                                  *
;    Company:                                                                 *
;                                                                             * 
;******************************************************************************
;                                                                             *
;    Files required: P18F4550.INC                                             *
;                                                                             *
;******************************************************************************

	LIST P=18F4550, F=INHX32	;directive to define processor
	#include <P18F4550.INC>	;processor specific variable definitions

;******************************************************************************
;Configuration bits
;Microchip has changed the format for defining the configuration bits, please 
;see the .inc file for futher details on notation.  Below are a few examples.



;   Oscillator Selection:
    CONFIG	FOSC = XT_XT         ;XT oscillator, XT used by USB

;******************************************************************************
;Variable definitions
	
	d1 EQU 0x30	
	d2 EQU 0x31	
	d3 EQU 0x32	

; These variables are only needed if low priority interrupts are used. 
; More variables may be needed to store other special function registers used
; in the interrupt routines.

		UDATA

WREG_TEMP	RES	1	;variable in RAM for context saving 
STATUS_TEMP	RES	1	;variable in RAM for context saving
BSR_TEMP	RES	1	;variable in RAM for context saving

		UDATA_ACS

EXAMPLE		RES	1	;example of a variable in access RAM

;******************************************************************************
;EEPROM data
; Data to be programmed into the Data EEPROM is defined here


DATA_EEPROM	CODE	0xf00000

		DE	"Test Data",0,1,2,3,4,5

;******************************************************************************
;Reset vector
; This code will start executing when a reset occurs.

RESET_VECTOR	CODE	0x0000

		goto	Main		;go to start of main code

;******************************************************************************
;High priority interrupt vector
; This code will start executing when a high priority interrupt occurs or
; when any interrupt occurs if interrupt priorities are not enabled.

HI_INT_VECTOR	CODE	0x0008

		bra	HighInt		;go to high priority interrupt routine

;******************************************************************************
;Low priority interrupt vector and routine
; This code will start executing when a low priority interrupt occurs.
; This code can be removed if low priority interrupts are not used.

LOW_INT_VECTOR	CODE	0x0018

		bra	LowInt		;go to low priority interrupt routine

;******************************************************************************
;High priority interrupt routine
; The high priority interrupt code is placed here to avoid conflicting with
; the low priority interrupt vector.


		CODE

HighInt:

;	*** high priority interrupt code goes here ***


		retfie	FAST

;******************************************************************************
;Low priority interrupt routine
; The low priority interrupt code is placed here.
; This code can be removed if low priority interrupts are not used.

LowInt:
		movff	STATUS,STATUS_TEMP	;save STATUS register
		movff	WREG,WREG_TEMP		;save working register
		movff	BSR,BSR_TEMP		;save BSR register

;	*** low priority interrupt code goes here ***


		movff	BSR_TEMP,BSR		;restore BSR register
		movff	WREG_TEMP,WREG		;restore working register
		movff	STATUS_TEMP,STATUS	;restore STATUS register
		retfie

;******************************************************************************
;Start of main program
; The main program code is placed here.

Main:

;	*** main code goes here ***

	BANK1
	movlw 	b'00000000' ;caso seja 0 = output = caso seja 1 = input
	movwf 	TRISD	;levar esses valores para o trisd
	movlw 	b'00000000' ;caso seja 0 = output = caso seja 1 = input
	movwf 	TRISB	;levar esses valores para o trisd
	
	BANK0	

	movlw 	b'00000000'
	movwf 	PORTB
loop:
	movlw 	b'00100001'
	movwf 	PORTB	
	movlw	b'01101111'	;desenha o numero 9
	movwf 	PORTD
	call Delay1s
	movlw	b'01111111'	;desenha o numero 8
	movwf 	PORTD
	call Delay1s	
	movlw	b'00000111'	;desenha o numero 7
	movwf 	PORTD
	call Delay1s	
	movlw	b'01111101'	;desenha o numero 6
	movwf 	PORTD	
	call Delay1s
	movlw	b'01101101'	;desenha o numero 5
	movwf 	PORTD
	call Delay1s	
	movlw	b'01100110'	;desenha o numero 4
	movwf 	PORTD
	call Delay1s
	movlw	b'01001111'	;desenha o numero 3
	movwf 	PORTD
	call Delay1s
	movlw	b'01011011'	;desenha o numero 2
	movwf 	PORTD
	call Delay1s
	movlw	b'00000110'	;desenha o numero 1
	movwf 	PORTD
	call Delay1s	
	movlw	b'00111111'	;desenha o numero 0	
	movwf 	PORTD
	call Delay1s
	movlw 	b'00010001'
	movwf 	PORTB
	movlw	b'00000110'	;desenha o numero 1
	movwf 	PORTD
	call Delay1s
	movlw	b'00111111'	;desenha o numero 0	
	movwf 	PORTD
	call Delay1s
	movlw 	b'00001100'
	movwf 	PORTB
	movlw	b'01101111'	;desenha o numero 9
	movwf 	PORTD
	call Delay1s
	movlw	b'01111111'	;desenha o numero 8
	movwf 	PORTD
	call Delay1s	
	movlw	b'00000111'	;desenha o numero 7
	movwf 	PORTD
	call Delay1s	
	movlw	b'01111101'	;desenha o numero 6
	movwf 	PORTD	
	call Delay1s
	movlw	b'01101101'	;desenha o numero 5
	movwf 	PORTD
	call Delay1s	
	movlw	b'01100110'	;desenha o numero 4
	movwf 	PORTD
	call Delay1s
	movlw	b'01001111'	;desenha o numero 3
	movwf 	PORTD
	call Delay1s
	movlw	b'01011011'	;desenha o numero 2
	movwf 	PORTD
	call Delay1s
	movlw	b'00000110'	;desenha o numero 1
	movwf 	PORTD
	call Delay1s	
	movlw	b'00111111'	;desenha o numero 0	
	movwf 	PORTD
	call Delay1s
	movlw 	b'00001010'
	movwf 	PORTB
	movlw	b'00000110'	;desenha o numero 1
	movwf 	PORTD
	call Delay1s
	movlw	b'00111111'	;desenha o numero 0	
	movwf 	PORTD
	call Delay1s
	goto loop
	
;******************************************************************************
;End of program

Delay1s
			;999990 cycles
	movlw	0x07
	movwf	d1
	movlw	0x2F
	movwf	d2
	movlw	0x03
	movwf	d3
Delay_0
	decfsz	d1, f
	goto	a
	decfsz	d2, f
a:
	goto b
	decfsz	d3, f
b:
	goto	Delay_0

			;6 cycles
	nop
	nop
	nop
	nop
	nop
	nop

	return
		END
